name: Infrastructure CI

on:
  push:
    branches: [main, v0.2.0, 'feature/**']
  pull_request:
    branches: [main, v0.2.0]
  schedule:
    # Weekly security scan on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  validate-configs:
    name: üîç Validate Configurations
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìã Validate base docker-compose.yml
        run: |
          echo "üîç Validating base configuration..."
          docker compose -f docker-compose.yml config --quiet
          echo "‚úÖ Base configuration is valid"

      - name: üîß Validate development configuration
        run: |
          echo "üîç Validating development configuration..."
          docker compose -f docker-compose.yml -f docker-compose.dev.yml config --quiet
          echo "‚úÖ Development configuration is valid"

      - name: üöÄ Validate production configuration
        run: |
          echo "üîç Validating production configuration..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml config --quiet
          echo "‚úÖ Production configuration is valid"

      - name: üß™ Validate test configuration
        run: |
          echo "üîç Validating test configuration..."
          docker compose -f docker-compose.yml -f docker-compose.test.yml config --quiet
          echo "‚úÖ Test configuration is valid"

      - name: üèóÔ∏è Validate build configuration
        run: |
          echo "üîç Validating build configuration..."
          docker compose -f docker-compose.yml -f docker-compose.build.yml config --quiet
          echo "‚úÖ Build configuration is valid"

  lint-configs:
    name: üßπ Lint Configuration Files
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Install yamllint
        run: pip install yamllint

      - name: üìù Lint YAML files
        run: |
          echo "üîç Linting YAML configuration files..."
          yamllint -d relaxed docker-compose*.yml
          find traefik zitadel -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed
          echo "‚úÖ All YAML files are properly formatted"

      - name: üîß Validate JSON files
        run: |
          echo "üîç Validating JSON configuration files..."
          find . -name "*.json" -exec python -m json.tool {} \; > /dev/null
          echo "‚úÖ All JSON files are valid"

  security-scan:
    name: üîê Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: üîê Scan Docker Compose configurations
        run: |
          echo "üîç Scanning infrastructure configurations for security issues..."
          trivy config --format sarif --output trivy-config.sarif .
          echo "‚úÖ Configuration security scan completed"

      - name: üìä Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-config.sarif

      - name: üîç Scan container images for vulnerabilities
        run: |
          echo "üîç Scanning container images for vulnerabilities..."
          
          # Extract unique images from docker-compose files
          IMAGES=$(grep -h "image:" docker-compose*.yml | sed 's/.*image: *//g' | sed 's/["'\'']*//g' | sort -u)
          
          echo "Found images to scan:"
          echo "$IMAGES"
          
          # Scan each image
          for image in $IMAGES; do
            echo "üîç Scanning $image..."
            trivy image --severity HIGH,CRITICAL --no-progress "$image"
          done
          
          echo "‚úÖ Container image vulnerability scan completed"

  infrastructure-checks:
    name: üèóÔ∏è Infrastructure Health Checks
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîç Check port conflicts
        run: |
          echo "üîç Checking for port conflicts..."
          
          # Extract all exposed ports from compose files
          PORTS=$(grep -h "ports:" -A 10 docker-compose*.yml | grep -E '^\s*-\s*[0-9]+:' | sed 's/.*- *\([0-9]*\):.*/\1/' | sort -n)
          
          echo "Found exposed ports:"
          echo "$PORTS"
          
          # Check for duplicates
          DUPLICATES=$(echo "$PORTS" | uniq -d)
          if [ -n "$DUPLICATES" ]; then
            echo "‚ùå Found duplicate ports: $DUPLICATES"
            exit 1
          fi
          
          echo "‚úÖ No port conflicts detected"

      - name: üåê Validate network configurations
        run: |
          echo "üîç Validating Docker networks..."
          
          # Check that all services define proper networks
          docker compose -f docker-compose.yml config | grep -A 1000 "networks:" | head -20
          
          echo "‚úÖ Network configuration is valid"

      - name: üíæ Validate volume configurations
        run: |
          echo "üîç Validating Docker volumes..."
          
          # Check volume definitions
          docker compose -f docker-compose.yml config | grep -A 1000 "volumes:" | head -20
          
          echo "‚úÖ Volume configuration is valid"

      - name: üîê Check SSL certificate structure
        run: |
          echo "üîç Checking SSL certificate structure..."
          
          if [ -d "traefik/certs" ]; then
            echo "Found certificates directory"
            ls -la traefik/certs/
            
            # Check for required certificate files for development
            if [ -f "traefik/certs/dev.memrok.com.crt" ] && [ -f "traefik/certs/dev.memrok.com.key" ]; then
              echo "‚úÖ Development certificates are present"
            else
              echo "‚ö†Ô∏è Development certificates not found (may be generated at runtime)"
            fi
          else
            echo "‚ö†Ô∏è SSL certificates directory not found"
          fi

  integration-test:
    name: üß™ Integration Testing
    runs-on: ubuntu-latest
    needs: [validate-configs, lint-configs]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîç Test service dependency resolution
        run: |
          echo "üîç Testing service dependency resolution..."
          
          # Parse and validate service dependencies without starting services
          docker compose -f docker-compose.yml -f docker-compose.test.yml config > /tmp/composed.yml
          
          # Check that all depends_on references exist
          python3 -c "
          import yaml
          with open('/tmp/composed.yml') as f:
              config = yaml.safe_load(f)
          
          services = config.get('services', {})
          service_names = set(services.keys())
          
          print('üîç Found services:', list(service_names))
          
          for service_name, service_config in services.items():
              depends_on = service_config.get('depends_on', [])
              if isinstance(depends_on, dict):
                  depends_on = list(depends_on.keys())
              
              for dep in depends_on:
                  if dep not in service_names:
                      print(f'‚ùå Service {service_name} depends on non-existent service: {dep}')
                      exit(1)
          
          print('‚úÖ All service dependencies are valid')
          "

      - name: üîç Validate environment templates
        run: |
          echo "üîç Validating environment variable templates..."
          
          # Check for required environment variables in compose files
          REQUIRED_VARS=$(grep -h '\${.*}' docker-compose*.yml | sed 's/.*\${\([^}]*\)}.*/\1/' | sort -u)
          
          if [ -n "$REQUIRED_VARS" ]; then
            echo "Found required environment variables:"
            echo "$REQUIRED_VARS"
            echo "‚úÖ Environment variable templates are properly defined"
          else
            echo "‚ÑπÔ∏è No environment variable templates found"
          fi

  # Summary job for branch protection
  infrastructure-ci-success:
    name: ‚úÖ Infrastructure CI Success
    runs-on: ubuntu-latest
    needs: [validate-configs, lint-configs, security-scan, infrastructure-checks, integration-test]
    if: always()
    steps:
      - name: üìä Check all jobs status
        run: |
          echo "üîç Checking all job results..."
          
          # Check if any job failed
          if [ "${{ needs.validate-configs.result }}" != "success" ] || \
             [ "${{ needs.lint-configs.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.infrastructure-checks.result }}" != "success" ] || \
             [ "${{ needs.integration-test.result }}" != "success" ]; then
            echo "‚ùå One or more CI jobs failed"
            exit 1
          fi
          
          echo "‚úÖ All infrastructure CI checks passed successfully!"

  # Notify on failure (optional)
  notify-failure:
    name: üö® Notify on Failure
    runs-on: ubuntu-latest
    needs: [infrastructure-ci-success]
    if: failure()
    steps:
      - name: üö® Infrastructure CI Failed
        run: |
          echo "‚ùå Infrastructure CI pipeline failed"
          echo "Please check the logs above for specific failure details"
          echo "Common issues:"
          echo "  - YAML syntax errors in docker-compose files"
          echo "  - Security vulnerabilities in container images"
          echo "  - Port conflicts between services"
          echo "  - Invalid environment variable references"